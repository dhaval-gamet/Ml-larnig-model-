# app.py
# ----------------------------
# Flask + ML Model + HTML UI + JSON API
# ----------------------------
from flask import Flask, request, jsonify, render_template
import pickle
import os

app = Flask(__name__)

# ---------- 1. рдореЙрдбрд▓ рд▓реЛрдб ----------
MODEL_PATH = "flower_model.pkl"
with open(MODEL_PATH, "rb") as f:
    model = pickle.load(f)

# ---------- 2. рд╣реЗрд▓реНрдкрд░ : рд░рдВрдЧ рдХреЛ рдирдореНрдмрд░ рдореЗрдВ рдмрджрд▓реЗрдВ ----------
COLOR_MAP = {"рд╣рд░рд╛": 0, "рд▓рд╛рд▓": 1, "рдкреАрд▓рд╛": 2}
def color_to_number(color_name: str) -> int:
    return COLOR_MAP.get(color_name.strip().lower(), -1)

# ---------- 3. HTML рд╣реЛрдордкреЗрдЬ (GET) + рдлрд╝реЙрд░реНрдо рдкреНрд░рд┐рдбрд┐рдХреНрд╢рди (POST) ----------
@app.route("/", methods=["GET", "POST"])
def index():
    result = None
    if request.method == "POST":
        color = request.form.get("color", "")
        size  = request.form.get("size", "")
        try:
            color_val = color_to_number(color)
            size_val  = int(size)
            if color_val == -1 or not 1 <= size_val <= 10:
                result = "тЪая╕П рд╕рд╣реА рд░рдВрдЧ (рд╣рд░рд╛/рд▓рд╛рд▓/рдкреАрд▓рд╛) рд╡ рдЖрдХрд╛рд░ (1-10) рджреЗрдВ!"
            else:
                pred = model.predict([[color_val, size_val]])[0]
                result = "ЁЯМ╕ рдпрд╣ рдлреВрд▓ рд╣реИ!" if pred == 1 else "ЁЯМ┐ рдпрд╣ рдЦрд░рдкрддрд╡рд╛рд░ рд╣реИ!"
        except Exception:
            result = "тЪая╕П рдЗрдирдкреБрдЯ рдлрд╝реЙрд░реНрдореЗрдЯ рдЧрд▓рдд рд╣реИ!"
    return render_template("index.html", result=result)

# ---------- 4. JSON API ---------- 
#    POST /predict
#    Body: { "color": "рд╣рд░рд╛", "size": 5 }
#    Response: { "prediction": "рдлреВрд▓ рд╣реИ!" }
@app.route("/predict", methods=["POST"])
def api_predict():
    if not request.is_json:
        return jsonify({"error": "JSON body expected"}), 415

    data = request.get_json(silent=True) or {}
    color = data.get("color")
    size  = data.get("size")

    # рдмреЗрд╕рд┐рдХ рд╡реИрд▓рд┐рдбреЗрд╢рди
    if color is None or size is None:
        return jsonify({"error": "Both 'color' and 'size' needed"}), 400

    color_val = color_to_number(color)
    if color_val == -1:
        return jsonify({"error": "Allowed colors: рд╣рд░рд╛, рд▓рд╛рд▓, рдкреАрд▓рд╛"}), 400
    try:
        size_val = int(size)
    except (TypeError, ValueError):
        return jsonify({"error": "'size' must be integer"}), 400
    if not 1 <= size_val <= 10:
        return jsonify({"error": "size must be 1-10"}), 400

    # рдкреНрд░рд┐рдбрд┐рдХреНрд╢рди
    try:
        pred = model.predict([[color_val, size_val]])[0]
        label = "рдлреВрд▓ рд╣реИ!" if pred == 1 else "рдЦрд░рдкрддрд╡рд╛рд░ рд╣реИ!"
        return jsonify({"prediction": label})
    except Exception as e:
        # рдлрд╝реЙрд▓рдмреИрдХ тАУ рдХреЛрдИ рдЕрдирдкреЗрдХреНрд╖рд┐рдд рддреНрд░реБрдЯрд┐
        return jsonify({"error": str(e)}), 500

# ---------- 5. рдПрдВрдЯреНрд░реА-рдкреЙрдЗрдВрдЯ ----------
if __name__ == "__main__":
    port = int(os.getenv("PORT", 5000))   # Render PORT env var
    app.run(host="0.0.0.0", port=port, debug=True)